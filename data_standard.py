import streamlit as st
import numpy as np
import pandas as pd
import openpyxl
from openpyxl import Workbook
from io import BytesIO
# import xlrd


st.title('üóÇÔ∏è Transformando diferentes bases em um mesmo padr√£o de dados')
st.caption('Feito com üß† por [Blue AI](https://blueai.com.br/)')
st.info('Este app transforma diferentes bases salvas em CSV ou Excel em um mesmo padr√£o de dados. **Os arquivos aqui carregados n√£o s√£o salvos, copiados ou armezados pela Blue AI** em nenhum momento. Esta aplica√ß√£o √© gratuita, **voc√™ pode usar quando e o quanto quiser**. O c√≥digo desta aplica√ß√£o em breve estar√° aberto e ser√° p√∫blico.')

st.markdown('\n\n')
st.write('#### 1) Comece escolhendo o seu arquivo, CSV ou Excel, para ser transformado')
col1, col2 = st.columns([1.5, 2.5])

with col1:
    file_type = st.radio(
        "1.1) Selecione o tipo de arquivo: üëâ",
        options=["CSV (.csv)", "Excel (.xlsx)", "Excel (.xls)"],
    )

with col2:
    if file_type == "CSV (.csv)":
        input_dataframe = st.file_uploader(label = "1.2) Carregue o seu arquivo aqui: üëá", type = 'csv')
    elif file_type == "Excel (.xlsx)":
        input_dataframe = st.file_uploader(label = "1.2) Carregue o seu arquivo aqui: üëá", type = 'xlsx')
    elif file_type == "Excel (.xls)":
        input_dataframe = st.file_uploader(label = "1.2) Carregue o seu arquivo aqui: üëá", type = 'xls')
    else:
        pass

if file_type == "CSV (.csv)":
    if input_dataframe:
        file_details = {
            "Filename":input_dataframe.name,
            "FileType":input_dataframe.type,
            "FileSize":input_dataframe.size}

        # wb = openpyxl.load_workbook(input_dataframe)

        ## Select sheet
        # sheet_selector = st.selectbox("Select sheet:",wb.sheetnames)
        header_line = st.number_input('1.3) Selecione em qual linha est√° os nomes das colunas da sua base:', step=1)
        new_df = pd.read_csv(input_dataframe, header=header_line)
        st.markdown('\n')
        st.markdown("----")
        st.caption(":blue[1.4) Confira a base selecionada:")
        st.write(new_df)
        st.markdown("----")
else:
    if input_dataframe:
        file_details = {
            "Filename":input_dataframe.name,
            "FileType":input_dataframe.type,
            "FileSize":input_dataframe.size}

        wb = openpyxl.load_workbook(input_dataframe)

        ## Show Excel file
        # st.subheader("File details:")
        # st.json(file_details,expanded=False)
        # st.markdown("----")

        ## Select sheet
        sheet_selector = st.selectbox("1.3) Seleciona a aba do seu arquivo:",wb.sheetnames)
        header_line = st.number_input('1.4) Selecione em qual linha est√° os nomes das colunas da sua base:', step=1)
        new_df = pd.read_excel(input_dataframe, sheet_selector, header=header_line)
        st.caption(f":blue[1.5) Confira a base seleciona na aba `{sheet_selector}`:]")
        st.write(new_df)
        st.markdown("----")

if input_dataframe:
    st.markdown('\n\n')
    st.write('#### 2) Para cada coluna desejada selecione o formato padr√£o que melhor a representa')
    df_payment = new_df
    df_claims = new_df
    df_advanced = new_df
    Payment_Tab, Claims_Tab, Advanced_Tab = st.tabs(["Template de faturamento", "Template de sinistralidade", "Configura√ß√£o avan√ßada"])

    with Payment_Tab:
        st.markdown('O template de padroniza√ß√£o de bases de faturamento organiza informa√ß√µes m√≠nimas necess√°rias, e comuns entre arquivos de diferentes operadoras, para registro de mensalidades por benefici√°rio. Identifique na sua base as colunas que representam cada informa√ß√£o abaixo:')
        header_list = df_payment.columns
        options_list = ['Nome do benefici√°rio', 'C√≥digo do benefici√°rio', 'Idade do benefici√°rio', 'Data de inclus√£o no plano', 'Data de exclus√£o no plano', 'C√≥digo de matr√≠cula', 'Categoria do plano de sa√∫de', 'Co-participa√ß√£o', 'Valor da mensalidade', 'Valor total da fam√≠lia do benefici√°rio', 'Titular ou dependente', 'Tipo de depend√™ncia']
        # selected_options = []
        for i in range(len(options_list)):
            try:
                option = st.selectbox(
                f"Qual formato melhor define a coluna **`{options_list[i]}`**?",
                (header_list), key=f"payment_option_`{[i]}`")

                df_payment = df_payment.rename(columns={option:options_list[i]})
                with st.expander("Clique para visualizar:"):
                    new_df = df_payment
                    new_df
                    # selected_options.append(options_list[i])
                    selected_options = options_list
            except ValueError:
                st.error('A coluna selecionada j√° foi usada, tente uma op√ß√£o diferente.', icon="ü§ñ")
            # option = st.selectbox(
            # f"Qual formato melhor define a coluna **`{header_selected[i]}`**?",
            # (options_list))

            # new_df = new_df.rename(columns={header_selected[i]:option})
            # new_df
            # header_list = options_list.remove(option)
        
        if st.button('Padronizar', key="payment_standard"):
            try:
                st.markdown("----")
                st.markdown('\n\n')
                st.write('#### 3) Confira o resultado e baixe a sua base padronizada')
                # st.write('<style>div.Widget.row-widget.stRadio > div{flex-direction:row;}</style>', unsafe_allow_html=True)
                # st.radio()

                # col3, col4 = st.columns([2, 2])

                # with col3:
                #     standard_only = st.checkbox('Somente colunas padronizadas')
                # with col4:
                #     entire_df = st.checkbox('Todas as colunas')

                # if standard_only:
                st.markdown('\n')
                new_df = new_df[selected_options]
                st.write(new_df)
                # if entire_df:
                #     st.markdown('\n')
                #     st.write(new_df)
                
                def to_excel(df):
                    output = BytesIO()
                    writer = pd.ExcelWriter(output, engine='xlsxwriter')
                    new_df.to_excel(writer, index=False, sheet_name='Sheet1')
                    workbook = writer.book
                    worksheet = writer.sheets['Sheet1']
                    format1 = workbook.add_format({'num_format': '0.00'}) 
                    worksheet.set_column('A:A', None, format1)  
                    writer.save()
                    processed_data = output.getvalue()
                    return processed_data

                df_xlsx = to_excel(new_df)
                st.markdown('\n\n')
                st.download_button(label='üì• Baixar Planilha',
                                                data=df_xlsx ,
                                                file_name= 'base_faturamento_padronizada.xlsx')
            except ValueError:
                pass


    with Claims_Tab:
        st.markdown('O template de padroniza√ß√£o de bases de sinistros organiza informa√ß√µes m√≠nimas necess√°rias, e comuns entre arquivos de diferentes operadoras, para registro de procedimentos realizados pelo plano de sa√∫de de cada benefici√°rio. Identifique na sua base as colunas que representam cada informa√ß√£o abaixo:')
        header_list = df_claims.columns
        options_list = ['C√≥digo do benefici√°rio', 'Sexo do benefici√°rio', 'Data de nascimento do benefici√°rio', 'C√≥digo tuss do procedimento', 'Valor pago pelo procedimento', 'Data de realiza√ß√£o do procedimento', 'Data de pagamento do procedimento', 'C√≥digo do prestador de sa√∫de']
        # selected_options = []
        for i in range(len(options_list)):
            try:
                option = st.selectbox(
                f"Qual formato melhor define a coluna **`{options_list[i]}`**?",
                (header_list), key=f"claims_option_`{[i]}`")

                df_claims = df_claims.rename(columns={option:options_list[i]})
                with st.expander("Clique para visualizar:"):
                    new_df = df_claims
                    new_df
                    # selected_options.append(options_list[i])
                    selected_options = options_list
            except ValueError:
                st.error('A coluna selecionada j√° foi usada, tente uma op√ß√£o diferente.', icon="ü§ñ")
            # option = st.selectbox(
            # f"Qual formato melhor define a coluna **`{header_selected[i]}`**?",
            # (options_list))

            # new_df = new_df.rename(columns={header_selected[i]:option})
            # new_df
            # header_list = options_list.remove(option)
        
        if st.button('Padronizar', key="claims_standard"):
            try:
                st.markdown("----")
                st.markdown('\n\n')
                st.write('#### 3) Confira o resultado e baixe a sua base padronizada')
                # st.write('<style>div.Widget.row-widget.stRadio > div{flex-direction:row;}</style>', unsafe_allow_html=True)
                # st.radio()

                # col3, col4 = st.columns([2, 2])

                # with col3:
                #     standard_only = st.checkbox('Somente colunas padronizadas')
                # with col4:
                #     entire_df = st.checkbox('Todas as colunas')

                # if standard_only:
                st.markdown('\n')
                new_df = new_df[selected_options]
                st.write(new_df)
                # if entire_df:
                #     st.markdown('\n')
                #     st.write(new_df)
                
                def to_excel(df):
                    output = BytesIO()
                    writer = pd.ExcelWriter(output, engine='xlsxwriter')
                    new_df.to_excel(writer, index=False, sheet_name='Sheet1')
                    workbook = writer.book
                    worksheet = writer.sheets['Sheet1']
                    format1 = workbook.add_format({'num_format': '0.00'}) 
                    worksheet.set_column('A:A', None, format1)  
                    writer.save()
                    processed_data = output.getvalue()
                    return processed_data

                df_xlsx = to_excel(new_df)
                st.markdown('\n\n')
                st.download_button(label='üì• Baixar Planilha',
                                                data=df_xlsx ,
                                                file_name= 'base_sinistros_padronizada.xlsx')
            except ValueError:
                pass

    with Advanced_Tab:
        st.markdown('O modo de configura√ß√£o avan√ßada te permite selecionar as colunas que voc√™ desejar da sua base de gest√£o de sa√∫de, e para cada coluna encontrar o melhor padr√£o que a defina. Identifique na sua base as colunas que gostaria de padronizar e, em seguida, selecione a defini√ß√£o que a represente melhor:')
        header_list = df_advanced.columns
        header_selected = st.multiselect('Selecione as colunas desejadas para serem padronizadas, voc√™ pode escolher quantas quiser:', header_list)
        options_list = ['Nome do benefici√°rio', 'C√≥digo do benefici√°rio', 'Sexo do benefici√°rio', 'Data de nascimento do benefici√°rio', 'Idade do benefici√°rio', 'Data de inclus√£o no plano', 'Data de exclus√£o no plano', 'C√≥digo de matr√≠cula',  'Operadora do plano de sa√∫de', 'Categoria do plano de sa√∫de', 'Empresa do benefici√°rio', 'Co-participa√ß√£o', 'Valor da mensalidade', 'Valor total da fam√≠lia do benefici√°rio', 'Titular ou dependente', 'Tipo de depend√™ncia', 'C√≥digo tuss do procedimento', 'Valor pago pelo procedimento', 'Data de realiza√ß√£o do procedimento', 'Data de pagamento do procedimento', 'C√≥digo do prestador de sa√∫de', 'UF do prestador de sa√∫de']
        selected_options = []
        for i in range(len(header_selected)):
            try:
                option = st.selectbox(
                f"Qual formato melhor define a coluna **`{header_selected[i]}`**?",
                (options_list))

                df_advanced = df_advanced.rename(columns={header_selected[i]:option})
                with st.expander("Clique para visualizar:"):
                    new_df = df_advanced
                    new_df
                    selected_options.append(option)
            except ValueError:
                st.error('A coluna selecionada j√° foi usada, tente uma op√ß√£o diferente.', icon="ü§ñ")
            # option = st.selectbox(
            # f"Qual formato melhor define a coluna **`{header_selected[i]}`**?",
            # (options_list))

            # new_df = new_df.rename(columns={header_selected[i]:option})
            # new_df
            # header_list = options_list.remove(option)

        if st.button('Padronizar', key="Advanced"):
            try:
                st.markdown("----")
                st.markdown('\n\n')
                st.write('#### 3) Confira o resultado e baixe a sua base padronizada')
                # st.write('<style>div.Widget.row-widget.stRadio > div{flex-direction:row;}</style>', unsafe_allow_html=True)
                # st.radio()

                # col3, col4 = st.columns([2, 2])

                # with col3:
                #     standard_only = st.checkbox('Somente colunas padronizadas')
                # with col4:
                #     entire_df = st.checkbox('Todas as colunas')

                # if standard_only:
                st.markdown('\n')
                new_df = new_df[selected_options]
                st.write(new_df)
                # if entire_df:
                #     st.markdown('\n')
                #     st.write(new_df)
                
                def to_excel(df):
                    output = BytesIO()
                    writer = pd.ExcelWriter(output, engine='xlsxwriter')
                    new_df.to_excel(writer, index=False, sheet_name='Sheet1')
                    workbook = writer.book
                    worksheet = writer.sheets['Sheet1']
                    format1 = workbook.add_format({'num_format': '0.00'}) 
                    worksheet.set_column('A:A', None, format1)  
                    writer.save()
                    processed_data = output.getvalue()
                    return processed_data

                df_xlsx = to_excel(new_df)
                st.markdown('\n\n')
                st.download_button(label='üì• Baixar Planilha',
                                                data=df_xlsx ,
                                                file_name= 'base_padronizada.xlsx')
            except ValueError:
                pass


    
        

